[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\NicolasL\AppData\Local\Temp\idea7.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\NicolasL\AppData\Local\Temp\idea7.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 1.8.0_362)
[debug]       Load.loadUnit: plugins took 311.5117ms
[debug]       Load.loadUnit: defsScala took 0.769599ms
[debug] [Loading] Scanning directory C:\Users\NicolasL\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\NicolasL\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 32.493499 ms
[debug]           Load.resolveProject(global-plugins) took 66.7176ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\NicolasL\.sbt\1.0\plugins, plugins: List(<none>))) took 143.0029ms
[debug] [Loading] Done in C:\Users\NicolasL\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 171.4161ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3347ms
[debug]     Load.loadUnit(file:/C:/Users/NicolasL/.sbt/1.0/plugins/, ...) took 497.355499ms
[debug]   Load.apply: load took 992.4523ms
[debug]   Load.apply: resolveProjects took 34.0773ms
[debug]   Load.apply: finalTransforms took 216.5704ms
[debug]   Load.apply: config.delegates took 37.372ms
[debug]   Load.apply: Def.make(settings)... took 917.799301ms
[debug]   Load.apply: structureIndex took 176.0424ms
[debug]   Load.apply: mkStreams took 3.1724ms
[info] loading global plugins from C:\Users\NicolasL\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4875.1176ms
[debug]           Load.loadUnit: plugins took 27.680701ms
[debug]           Load.loadUnit: defsScala took 0.0081ms
[debug] [Loading] Scanning directory C:\Users\NicolasL\IdeaProjects\SNFDefinito\project
[debug]             Load.loadUnit: mkEval took 22.9198ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\NicolasL\IdeaProjects\SNFDefinito\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.7215 ms
[info] loading settings for project snfdefinito-build from idea7.sbt ...
[debug]               Load.resolveProject(snfdefinito-build) took 5.5949ms
[debug]             Load.loadTransitive: finalizeProject(Project(id snfdefinito-build, base: C:\Users\NicolasL\IdeaProjects\SNFDefinito\project, plugins: List(<none>))) took 10.4813ms
[debug] [Loading] Done in C:\Users\NicolasL\IdeaProjects\SNFDefinito\project, returning: (snfdefinito-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6062.9512ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.084801ms
[debug]         Load.loadUnit(file:/C:/Users/NicolasL/IdeaProjects/SNFDefinito/project/, ...) took 6099.3533ms
[debug]       Load.apply: load took 6101.3564ms
[debug]       Load.apply: resolveProjects took 0.1746ms
[debug]       Load.apply: finalTransforms took 19.9801ms
[debug]       Load.apply: config.delegates took 0.648ms
[debug]       Load.apply: Def.make(settings)... took 228.313401ms
[debug]       Load.apply: structureIndex took 61.363ms
[debug]       Load.apply: mkStreams took 0.0065ms
[info] loading project definition from C:\Users\NicolasL\IdeaProjects\SNFDefinito\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10025.311501ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\NicolasL\IdeaProjects\SNFDefinito
[debug]       Load.loadUnit: mkEval took 0.933ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.715 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 41.295299ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\NicolasL\IdeaProjects\SNFDefinito, plugins: List(<none>))) took 48.186ms
[debug] [Loading] Done in C:\Users\NicolasL\IdeaProjects\SNFDefinito, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2971.313099ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.6043ms
[debug]   Load.loadUnit(file:/C:/Users/NicolasL/IdeaProjects/SNFDefinito/, ...) took 13008.165701ms
[debug] Load.apply: load took 13010.3666ms
[debug] Load.apply: resolveProjects took 0.1668ms
[debug] Load.apply: finalTransforms took 26.718099ms
[debug] Load.apply: config.delegates took 0.3649ms
[debug] Load.apply: Def.make(settings)... took 179.8023ms
[debug] Load.apply: structureIndex took 57.6917ms
[debug] Load.apply: mkStreams took 0.0075ms
[info] set current project to SNFDefinito (in build file:/C:/Users/NicolasL/IdeaProjects/SNFDefinito/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50193 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50193, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SNFDefinito (in build file:/C:/Users/NicolasL/IdeaProjects/SNFDefinito/)
[debug] > Exec(idea-shell, None, None)
